name: CI/CD Pipeline for Node.js Application

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build, Test, and Deploy
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      ECR_REPOSITORY: appointment-service
      ECS_CLUSTER: appointment-cluster
      ECS_SERVICE: appointment-service

    steps:
      # Checkout code from the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Install dependencies and run tests
      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      # Build and tag the Docker image
      - name: Build and Tag Docker Image
        run: |
          docker build -t $ECR_REPOSITORY:latest .
          docker tag $ECR_REPOSITORY:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest

      # Push the Docker image to ECR
      - name: Push Docker Image to ECR
        run: |
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest

      # Update the ECS service with the new image
      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region $AWS_REGION

  notify:
    name: Notify Success or Failure
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - name: Notify Success or Failure
        if: ${{ success() }}
        run: echo "Deployment Successful üéâ"
      - name: Notify Failure
        if: ${{ failure() }}
        run: echo "Deployment Failed ‚ùå"
